@page "/R_Ventas"
@page "/R_Ventas/{RVentasId:int}"
@using Samir_API1_P2.Shared
@inject NotificationService notificacionesService
@inject HttpClient httpClient


<PageTitle>Registro de Ventas</PageTitle>

<div class="card-header">
	<h3>Registros de Ventas</h3>
</div>

<EditForm Model="ventas" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	@*ID y Fecha*@
	<div class="row">
		<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4 mt-4">
			<label class="form-label" @for="productos.ProductoId">Ventas Id</label>
			<div class="d-flex align-items-center">
				<InputNumber id="EntradasId" min="0" class="form-control" @bind-Value="clientes.ClienteId" />
				<button class="btn btn-primary ml-2" type="button" @onclick="Buscar">
					<i class="oi oi-magnifying-glass" />
				</button>
			</div>
		</div>

		<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4 mt-4 text-right">
			<label class="form-label" @for="ventas.Fecha">Fecha</label>
			<div class="d-flex align-items-center">
				<InputDate id="Fecha" class="form-control" @bind-Value="ventas.Fecha" />
			</div>
		</div>

	</div>

	<div class="col-md-6 mb-3 mt-2">
		<label class="form-label" @for="productos.NombreProducto">Nombre del Cliente:</label>
		<InputText id="NombreProducto" placeholde="Introduzca un Nombre" @bind-Value="clientes.Nombres" class="form-control" />
	</div>

	<div class="card-header mt-4">

		<h5>Facturas Pendientes</h5>

		<div class="row">


		</div>

		<table class='table table-sm mt-2'>
			<thead>
				<tr>
					<th>Id</th>
					<th>Fecha</th>
					<th>Monto</th>
					<th>Balance</th>
					<th>Cobrado</th>
					<th>Pagar</th>
					<th></th>
				</tr>
			</thead>
			<tbody>

			</tbody>
		</table>

	</div>


	<div class="d-flex justify-content-center mb-4 mt-4">
		<div class="btn-group">
			<button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> Nuevo <i class="oi oi-file" /></button>
			<button type="submit" class="btn btn-outline-success" @onclick="Guardar"> Guardar <i class="oi oi-document" /></button>
			<button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
		</div>
	</div>

</EditForm>

@code {

	[Parameter]
	public int RVentasId { get; set; }

	public Ventas ventas { get; set; } = new Ventas();
	public Clientes clientes { get; set; } = new Clientes();

	protected override async Task OnInitializedAsync()
	{
		if(RVentasId > 0)
		{
			this.ventas.VentaId = RVentasId;
			await Buscar();
		}
	}

	protected async Task Buscar()
	{
		var ventasNotNull = (await httpClient.GetFromJsonAsync<List<Ventas>>($"api/Ventas")).ToList().Any(v => v.VentaId == ventas.VentaId);
		if (ventasNotNull)
		{
			var ventaEncontrada = await httpClient.GetFromJsonAsync<Ventas>($"api/Ventas/{ventas.VentaId}");
			if(ventaEncontrada != null)
			{
				this.ventas = ventaEncontrada;
				StateHasChanged();
			}
			else
			{
				var mensaje = new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = "No se encontro la Venta",
					Detail = $"No se encontro la Venta con el Id: {ventas.VentaId}",
					Duration = 5_000
				};
				notificacionesService.Notify(mensaje);
			}
		}

	}

	protected async Task Guardar()
	{
		using var response = await httpClient.PostAsJsonAsync("api/Ventas", ventas);
		if (!response.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "No se pudo guardar la Venta",
				Detail = $"No se pudo guardar la Venta con el Id: {ventas.VentaId}",
				Duration = 5_000
			};
			notificacionesService.Notify(mensaje);
		}
		var ProductoGuardado = await response.Content.ReadFromJsonAsync<Ventas>();
		if(ProductoGuardado is not null)
		{
			this.ventas = ProductoGuardado;
			StateHasChanged();
			var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Venta Guardada",
				Detail = $"Se guardo la Venta con el Id: {ventas.VentaId}",
				Duration = 5_000
			};
			notificacionesService.Notify(mensaje);
			Nuevo();
		}
	}

	protected async Task Nuevo()
	{
		this.ventas = new Ventas();
		this.clientes = new Clientes();
		
		var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Nuevo ",
				Detail = "Puede introducir una nueva Venta",
				Duration = 5_000
			};
		notificacionesService.Notify(mensaje);
	}

	protected async Task Eliminar()
	{
		using var reponse = await httpClient.DeleteAsync($"api/Ventas/{ventas.VentaId}");
		if(!reponse.IsSuccessStatusCode)
		{
			var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "No se pudo eliminar la Venta",
				Detail = $"No se pudo eliminar la Venta con el Id: {ventas.VentaId}",
				Duration = 5_000
			};
			notificacionesService.Notify(mensaje);
		}
		else
		{
			var mensaje = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "Venta Eliminada",
				Detail = $"Se elimino la Venta con el Id: {ventas.VentaId}",
				Duration = 5_000
			};
			notificacionesService.Notify(mensaje);
			Nuevo();
		}
	}
}
